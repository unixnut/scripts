#! /bin/sh
# qe (Bourne shell script) -- Quick extract


# *** DEFINITIONS ***
SELF=qe
VERSION=0.3
ALLOWED_OPTIONS=vhld:C:o
ALLOWED_LONG_OPTIONS=help,verbose,list,dest,target,overlap


# *** FUNCTIONS ***
show_help()
{
  cat << EOT_HELP
Usage: qe {-d <dir> | [-C <dir>]} <archive>...

Where
  -d    Specifies a directory to extract archive into
  -C    Directory to change into before extracting; a subdirectory is created

When using -C, if the archive contains a single subdirectory, it will be the
one that is created.  Otherwise the created subdirectory will have the name of
the archive without the extension.

Note that unlike some tools, this one is designed to extract multiple archives
and so does NOT take an optional [<path>...] argument specifying files to
extract.

Version $VERSION
EOT_HELP
}


set_mode()
{
  if [ -n "$mode" ] ; then
    echo "$SELF: ERROR: Incompatible options supplied" >&2
    exit 1
  fi
  mode=$1
}


# Deliberately fail if there is more than one path segment missing
make_dir()
{
  if [ ! -d "$1" ] ; then
    if [ -e "$1" ] ; then
      echo "$SELF: ERROR: Target '$1' exists and is not a directory" >&2
      exit 3
    fi
    mkdir "$1"
  fi
}


# Sets $extension_glob; $extract and $list
determine_file_type()
{
  case "$1" in
    *.a)                       extension_glob=.a ; extract=extract_a ; list=list_a  ;;
    *.arj)                     extension_glob=.arj ; extract=extract_arj ; list=list_arj  ;;
    *.tar|*.tgz|*.tbz|*.txz|*.tdz|*.tlz)   extension_glob='.???' ; extract=extract_tar ; list=list_tar  ;;
    *.tar.*)                   extension_glob=.tar.\* ; extract=extract_tar ; list=list_tar  ;;
    *.zip)                     extension_glob=.zip ; extract=extract_zip ; list=list_zip  ;;
    *.jar|*.war|*.ear|*.xpi)   extension_glob='.???' ; extract=extract_zip ; list=list_zip  ;;
    *.deb|*.ipk)               extension_glob='.???' ; extract=extract_deb ; list=list_deb  ;;
    *.udeb|*.ddeb)             extension_glob='.????' ; extract=extract_deb ; list=list_deb  ;;
    *.egg)                     extension_glob=.egg ; extract=extract_egg ; list=list_egg  ;;
    *.iso|*.bin|*.raw)         extension_glob='.???' ; extract=extract_iso ; list=list_iso  ;;
    *.lha|*.lzh)               extension_glob=.lha ; extract=extract_lha ; list=list_lha  ;;
    ## *.bz2)                     extension_glob=.bz2 ; extract=extract_bz2 ; list=list_bz2  ;;
    ## *.lz)                      extension_glob=.lz ; extract=extract_lz ; list=list_lz  ;;
    ## *.lzo)                     extension_glob=.lzop ; extract=extract_lzop ; list=list_lzop  ;;
    ## *.lzma)                    extension_glob=.lzma ; extract=extract_lzma ; list=list_lzma  ;;
    ## *.gz)                      extension_glob=.gz ; extract=extract_gz ; list=list_gz  ;;
    ## *.dz)                      extension_glob=.dz ; extract=extract_gz ; list=list_gz  ;;
    *.lz4)                     extension_glob=.lz4 ; extract=extract_lz4 ; list=list_lz4  ;;
    ## *.xz)                      extension_glob=.xz ; extract=extract_xz ; list=list_xz  ;;
    ## *.br)                      extension_glob=.br ; extract=extract_br ; list=list_br  ;;
    ## *.zstd)                    extension_glob=.zstd ; extract=extract_zstd ; list=list_zstd  ;;
    ## *.Z)                       extension_glob=.Z ; extract=extract_compress ; list=list_compress  ;;
    ## *.lzfse)                   extension_glob=.lzfse ; extract=extract_lzfse ; list=list_lzfse  ;;
    ## *.snappy)                  extension_glob=.snappy ; extract=extract_snappy ; list=list_snappy  ;;
    *.rar|*.r[0-9][0-9])       extension_glob='.???' ; extract=extract_rar ; list=list_rar  ;;
    *.rpm)                     extension_glob=.rpm ; extract=extract_rpm ; list=list_rpm  ;;
    *.whl)                     extension_glob=.whl ; extract=extract_whl ; list=list_whl  ;;
    *.7z)                      extension_glob=.7z ; extract=extract_7z ; list=list_7z  ;;
    *.zoo)                     extension_glob=.zoo ; extract=extract_zoo ; list=list_zoo  ;;
    *.pax)                     extension_glob=.pax ; extract=extract_pax ; list=list_pax  ;;
    *.ace)                     extension_glob=.ace ; extract=extract_generic ; list=list_generic  ;;
    *.adf)                     extension_glob=.adf ; extract=extract_generic ; list=list_generic  ;;
    *.apm)                     extension_glob=.apm ; extract=extract_generic ; list=list_generic  ;;
    *.arc)                     extension_glob=.arc ; extract=extract_generic ; list=list_generic  ;;
    *.cpio)                    extension_glob=.cpio ; extract=extract_cpio ; list=list_cpio  ;;
    *.dmg)                     extension_glob=.dmg ; extract=extract_7z ; list=list_7z  ;;
    *.dms)                     extension_glob=.dms ; extract=extract_generic ; list=list_generic  ;;
    *.iso)                     extension_glob=.iso ; extract=extract_7z ; list=list_7z  ;;
    *.lbr)                     extension_glob=.lbr ; extract=extract_generic ; list=list_generic  ;;
    *.pak)                     extension_glob=.pak ; extract=extract_generic ; list=list_generic  ;;
    *.pp)                      extension_glob=.pp ; extract=extract_generic ; list=list_generic  ;;
    *.sit)                     extension_glob=.sit ; extract=extract_generic ; list=list_generic  ;;
    *.sitx)                    extension_glob=.sitx ; extract=extract_generic ; list=list_generic  ;;
    *.xar)                     extension_glob=.xar ; extract=extract_7z ; list=list_7z  ;;
    *.zoo)                     extension_glob=.zoo ; extract=extract_generic ; list=list_generic  ;;
    *) echo "$SELF: ERROR: Unknown file type" >&2
       exit 1
       ;;
  esac
}


#*
# If there is a unique toplevel within the archive, output that, otherwise
# derived a subdirectory name from the name of the archive.
#
# @param 1: archive filename.
#
# Expects archive listing on input.
#
# @return 1 if the subdirectory is to be created explicitly, or 0 if not.
# (The first case counts as an exceptional condition as extra action needs to
# be taken in some cases.)
calculate_subdir()
{
  local subdir basename=${1##*/}

  # Check input for a unique toplevel
  subdir=$(awk '{ oldprefix = prefix;
                  count = split($0, a, /\//);
                  ## if (count >= 2) ...
                  prefix = a[1];
                  if (NR >= 2 && !changed)
                    changed = (prefix != oldprefix);
                }
                END { if (!changed) print prefix; }')

  if [ -z "$subdir" ] ; then
    # No unique toplevel within the archive, so fall back to stripping
    # extension off the basename of the archive filename and using that
    # (this subdirectory will have to be created because some archivers won't
    # do it automatically)
    echo "${basename%$extension_glob}"
    return 1
  else
    echo "$subdir"
  fi
}


extract_zip()
{
  if [ -n "$1" ] ; then
    unzip $([ $verbose -eq 0 ] && printf %s -q) -d "$1" "$2"
  else
    unzip $([ $verbose -eq 0 ] && printf %s -q) "$2"
  fi
}


# Warning: tarballs usually contain a "." entry.  If extracting an archive
# containing a unique toplevel, warnings can occur, e.g.
#   ": .: Cannot utime: Operation not permitted"
extract_tar()
{
  if [ -n "$1" ] ; then
    make_dir "$1"
    tar x$([ $verbose -ge 1 ] && printf %s v)f "$2" -C "$1"
  else
    tar x$([ $verbose -ge 1 ] && printf %s v)f "$2"
  fi
}


extract_cpio()
{
  # --quiet suppresses messages and is orthogonal to --verbose, which shows file details
  local cpio_opts="$([ $verbose -ge 1 ] && printf %s --verbose) --quiet\
                   --unconditional --preserve-modification-time"

  ## (cd tmp/berk ; find . ! -path . | cpio -o ) > ...   supports -L
  if [ -n "$1" ] ; then
    make_dir "$1"
    # --make-directories works, but results in this message (regardless of
    # whether "." is in archive):
    #   cpio: <dest>: Cannot change mode to rwxr-xr-x: No such file or directory
    cpio --extract --file "$2" $cpio_opts -D "$1"
  else
    cpio --extract --file "$2" $cpio_opts
  fi
}


# Primitive extraction of one file named $child_dir (borrow extension-removal
# functionality)
extract_lz4()
{
  lz4 -d "$1" $extraction_root/$child_dir
}


extract_7z()
{
  # Always overwrite
  # -bb1 shows names of files extracted, prefixed with a hyphen and a space
  # -bd turns off progress indicator
  local opts="-bd $([ $verbose -ge 1 ] && printf %s -bb1) -aoa"
  local prog=7z

  if [ -x "`which 7z`" ]; then
    :
  elif [ -x "`which 7za`" ]; then
    prog=7za
  elif [ -x "`which 7zr`" ]; then
    prog=7zr
  fi

  if [ -n "$1" ] ; then
    ## make_dir "$1"
    $prog x $opts -o"$1" "$2"
  else
    $prog x $opts "$2"
  fi |
    sed -n 's/^- //p'
}


## extract_a()
## extract_arj()
## extract_br()
## extract_bz2()
## extract_compress()
## extract_deb()
## extract_egg()
## extract_generic()
## extract_gz()
## extract_iso()
## extract_lha()
## extract_lz()
## extract_lzfse()
## extract_lzma()
## extract_lzop()
## extract_pax()
## extract_rar()
## extract_rpm()
## extract_snappy()
## extract_whl()
## extract_xz()
## extract_zoo()
## extract_zstd()


# List a zip file, removing the headers and footers
list_zip()
{
  unzip -l "$1" |
    awk 'process && /^---------/ { process = 0; }
         process == 1 { filename = substr($0, pos); print filename; }
         process != 1 { if (match($0, /^-+ + -+ -+ +/))
                        {
                          pos = RLENGTH+1; process = 1;
                        }
                      }'
}


list_tar()
{
  tar tf "$1" |
    awk '!/^\.?\/$/ { filename = $0;
                      sub(/^\.\//, "", filename);
                      print filename;
                    }'
}


list_lz4()
{
  lz4 -dc "$1"
}


list_cpio()
{
  # --quiet suppresses messages and is orthogonal to --verbose, which shows file details
  cpio --list $([ $verbose -ge 1 ] && printf %s --verbose) --quiet --file "$1" |
    grep -v '^\.$'
}


list_a()
{
  ar tv "$1"
}


list_arj()
{
  unarj l "$1"
}


list_deb()
{
  dpkg-deb --contents "$1"
}


list_egg()
{
  unzip -p "$1" EGG-INFO/PKG-INFO | \
    sed '/^Description:/,/^\S/{/^Description:/d; /^\S/b; d}'
  echo
  unzip -v "$1"
}


list_iso()
{
  iso_list "$1"
}


list_lha()
{
  lha v "$1"
}


list_lz()
{
  if [ -x "`which lzip`" ]; then
    lzip -dc "$1"
  else
    lunzip -dc "$1"
  fi
}


list_rar()
{
  if [ -x "`which rar`" ]; then
    rar v "$1"
  else
    unrar v "$1"
  fi
}


list_rpm()
{
  rpm -q -i -p "$1"
  echo
  echo '*** Contents:'
  rpm -q -l -p "$1"
}


list_whl()
{
  unzip -p "$1" '*.dist-info/METADATA' | sed '/^$/q'
  unzip -v "$1"
}


list_xz()
{
  xz --robot --list "$1"
}


list_7z()
{
  if [ -x "`which 7z`" ]; then
    7z l "$1"
  elif [ -x "`which 7za`" ]; then
    7za l "$1"
  else
    7zr l "$1"
  fi |
    awk '# end condition
         process && /^-------------------/ { ++process; }
         process == 1                      { filename = substr($0, pos); print filename; }
         # Find the length of the first four separators on the line plus the spaces after each
         process == 0                      { if (match($0, /^-+ +-+ +-+ +-+ +/))
                                             {
                                               pos = RLENGTH+1; ++process;
                                             }
                                           }'
}


list_zoo()
{
  # Not available under Debian
  if [ -x "`which zoo`" ]; then
    zoo v "$1"
  else
    unzoo -l "$1"
  fi
}


## list_br()
## list_bz2()
## list_compress()
## list_generic()
## list_gz()
## list_lzfse()
## list_lzma()
## list_lzop()
## list_pax()
## list_snappy()
## list_zstd()



# *** MAINLINE ***
# == command-line parsing ==
# -- defaults --
verbose=0

# -- option handling --
set -e
orthogonal_opts=$(getopt --shell=sh --name=$SELF \
  --options=+$ALLOWED_OPTIONS --longoptions=$ALLOWED_LONG_OPTIONS -- "$@")
eval set -- "$orthogonal_opts"
set +e      # getopt would have already reported the error

while [ x"$1" != x-- ] ; do
  case "$1" in
    -l|--list) set_mode list ;;
    -d|--dest)
        # This will be be created if it doesn't exist; archive contents are extracted here
        # (unzip(1) semantics)
        set_mode direct ; extraction_dir=$2
        shift
        ;;
    -C|--target)
        # This must exist; subdirectory based on archive name or unique
        # toplevel is created
        set_mode target
        parent_dir=$2
        if [ ! -d "$parent_dir" ] ; then
          echo "$SELF: ERROR: Target directory '$parent_dir' does not exist" >&2
          exit 2
        fi
        shift
        ;;
    -o|--overlap) overlapping_dests_ok=y ;;
    -v|--verbose) verbose=$((verbose + 1)) ;;
    -h|--help) show_help ; exit ;;
    -1) echo "${SELF}: Warning: Blah blah blah feature unsupported" >&2 ;;
  esac
  shift     # get rid of option (or if the inner shift already did, get rid of arg)
done
shift       # get rid of the "--"

# -- argument checking --
if [ $# -lt 1 ] ; then
  ## echo "Usage: $SELF ..." >&2
  show_help >&2
  exit 1
fi

# -- argument handling --


# == sanity checking ==


# == preparation ==


# == processing ==
if [ $# -eq 0 -o "$1" = - ] ; then
  # Reading standard input
  if [ -t 0 ] ; then
    echo "$SELF: ERROR: Cannot read standard input from a terminal" >&2
    exit 1
  fi

  # FIXME
  # type file and/or save as temporary file
  ...
else
  for file ; do
    determine_file_type "$file"

    if [ "$mode" = list ] ; then
      $list "$file"
    else
      # Set $extraction_root and $child_dir (the latter includes the unique
      # toplevel subdirectory within the archive, if any)

      create_extraction_root=y

      # Determine unique toplevel ($extraction_root)
      if [ -z "$extraction_dir" -a -z "$parent_dir" ] ; then
        # ($mode = <none>)
        # Current directory; a single subdirectory will be created during extraction
        if child_dir="$($list "$file" | calculate_subdir "$file")"
        then
          # The archive contains a unique toplevel subdir
          create_extraction_root=n
          extraction_root=
        else
          extraction_root="$child_dir"
        fi
      elif [ -n "$parent_dir" ] ; then
        # ($mode = target)
        # Specified target directory; a single subdirectory will be created during extraction
        if child_dir="$parent_dir/$($list "$file" | calculate_subdir "$file")"
        then
          # The archive contains a unique toplevel subdir
          create_extraction_root=n
          extraction_root="$parent_dir"
        else
          extraction_root="$child_dir"
        fi
      else
        # ($mode = direct)
        # Extract into specific destination (create if missing) without doing
        # anything special related to the archive filename or contents
        extraction_root="$extraction_dir"
      fi

      # Sanity checking
      # (Does not apply if -d used; all archives are deliberately being
      # extracted into $extraction_dir)
      if [ -z "$extraction_dir" ] ; then
        # There's a different $file_dest per archive, therefore this directory
        # already existing (and not empty) for any archive is a possible error condition
        if [ -d "$child_dir" -a -s "$child_dir" -a "$overlapping_dests_ok" != y ] ; then
          # TODO: Seek confirmation and bail out if not received
          echo "$SELF: Warning: '$child_dir/' already exists for '$file'" >&2
        fi
      fi

      # Extract
      ## if [ ! -d "$child_dir" -a "$create_extraction_root" = y ] ; then
      ##   echo "Creating $file_dest"
      ## else
      ##   echo "Using existing $file_dest"
      ## fi
      if [ $verbose -ge 1 ] ; then
        if [ -z "$extraction_dir" ] ; then
          # ($mode != direct)
          echo "Extracting '$file' as '$child_dir'"
        else
          # ($mode = direct)
          echo "Extracting '$file' into '$extraction_dir'"
        fi
      fi
      if [ $verbose -ge 2 ] ; then
        echo \* $extract "$extraction_root" "$file"
      fi
      $extract "$extraction_root" "$file"
    fi
  done
fi


# vim: set tabstop=2 shiftwidth=2 :
# Local Variables:
# tab-width: 2
# end:
